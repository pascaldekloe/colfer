// Code generated by colf(1); DO NOT EDIT.
// The compiler used schema file {{.SchemaFileList}} for package {{.Name}}.
{{if .HasText }}
import 'dart:convert';
{{- end}}
import 'dart:typed_data';
{{- range .Refs}}
import '../{{.Name}}/Colfer.dart' as {{.NameNative}};
{{- end}}

{{.DocText "/// "}}

/// The upper limit for serial byte sizes.
const colferSizeMax = {{.SizeMax}};
{{- if .HasList}}
/// The upper limit for the number of elements in a list.
const colferListMax = {{.ListMax}};
{{- end}}

{{range .Structs}}
{{.DocText "/// "}}
class {{.NameNative}} {

  // Constructor
  {{.NameNative}}({
{{- range .Fields}}
{{- if and .TypeRef .TypeList}}List<{{.TypeNative}}>
{{- else}}{{.TypeNative}}
{{- end}}? {{.NameNative}},
{{- end}}
})

{{- range $index, $field := .Fields}}
{{if eq $index 0}}:
{{else}},
{{end}}
{{.NameNative}} = {{.NameNative}}
{{- if .TypeRef}}{{if .TypeList}} ?? []{{- end}}
{{- else if .TypeList}}
{{- if eq .Type "text" "binary"}} ?? []
{{- else}} ?? {{.TypeNative}}(0)
{{- end}}
{{- else if eq .Type "bool"}} ?? false
{{- else if eq .Type "text"}} ?? ''
{{- else if eq .TypeNative "int"}} ?? 0
{{- else if eq .TypeNative "double"}} ?? 0.0
{{- else if eq .Type "timestamp"}} ?? DateTime.fromMillisecondsSinceEpoch(0, isUtc: true)
{{- else if eq .Type "binary"}} ?? Uint8List(0)
{{- end}}
{{- end}};


{{- range .Fields}}
{{.DocText "  /// "}}
{{if and .TypeRef .TypeList}}List<{{.TypeNative}}>
{{- else}}{{.TypeNative}}
{{- end}}
{{- if .TypeRef}}{{if not .TypeList}}?{{end}}{{end}} {{.NameNative}};
{{end}}

  /// Returns an over estimatation of marshal length.
  ///
  /// Throws [RangeError] if the size of a list exceeds [colferListMax].
  /// Returns an over estimated length for the required buffer. String
  /// characters are counted for 4 bytes, everything has its exact size.
  int marshalLen() {
    int _l = 1;
{{range .Fields}} { {{template "marshal-len" .}} } {{end}}
    if (_l > colferSizeMax) {
      return colferSizeMax;
    }
    return _l;
  }

{{template "marshal" .}}
{{template "unmarshal" .}}

  @override
  bool operator ==(_other) {
    if (_other is! {{.NameNative}}
{{- range .Fields}} ||
{{- if or (.TypeList) (eq .Type "binary")}} {{.NameNative}}.length != _other.{{.NameNative}}.length
{{- else}} {{.NameNative}} != _other.{{.NameNative}}
{{- end}}
{{- end}})
      return false;
{{- range .Fields}}
{{- if and (eq .Type "binary") (.TypeList)}}
    for (int _i = 0; _i < {{.NameNative}}.length; _i++) {
      var _l1 = {{.NameNative}}[_i];
      var _l2 = _other.{{.NameNative}}[_i];
      if (_l1.length != _l2.length)
        return false;
      for (int _i = 0; _i < _l1.length; _i++)
        if (_l1[_i] != _l2[_i]) return false;
    }
{{- else if or (eq .Type "binary") (.TypeList)}}
    for (int _i = 0; _i < {{.NameNative}}.length; _i++)
      if ({{.NameNative}}[_i] != _other.{{.NameNative}}[_i]) return false;
{{- end}}
{{- end}}
    return true;
  }

  @override
  int get hashCode {
    int _h = 0;
{{- range .Fields}}
{{- if .TypeList}}
    _h = 31 * _h + {{.NameNative}}.length;
    for (var _e in {{.NameNative}}) _h = 31 * _h + _e.hashCode;
{{- else}}
    _h = 31 * _h + {{.NameNative}}.hashCode;
{{- end}}
{{- end}}
    return _h;
  }

  @override
  String toString() => 'class {{.NameNative}} {'
{{- $first := true}}
{{- range .Fields}}
  '{{if $first}}{{$first = false}}{{else}}, {{end}}{{.NameNative}}:
{{- if eq .Type "text"}}
{{- if .TypeList}} [${ {{.NameNative}}.isNotEmpty ? "\"{{.NameNative}}.join('\", \"')}" : ""}]
{{- else}} "${{.NameNative}}"
{{- end}}
{{- else}}
{{- if .TypeList}} List<{{.TypeNative}}>{{else}} {{end}}${ {{.NameNative}}.toString()}
{{- end}}'
{{- end}}
'}';
}
{{- end}}
