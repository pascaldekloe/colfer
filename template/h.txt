// Code generated by colf(1); DO NOT EDIT.
{{- range .}}{{/* package range */}}
// The compiler used schema file {{.SchemaFileList}} for package {{.Name}}.
{{- end}}

#include <stdint.h>
#include <stdlib.h>
{{- if .HasTimestamp}}
#include <time.h>
{{- end }}

#ifdef __cplusplus
extern "C" {
#endif
{{- range .}}{{/* package range */}}

{{range .Structs}}
{{.DocText "// "}}
struct {{.NameNative}} {

{{- range .Fields}}
 {{- if ne .Index 0}}{{/* newline separator */}}
 {{end}}
 {{.DocText "\t// "}}
 {{- if not .TypeList}}
  {{- if eq .Type "bool"}}
	// {{.NameNative}} in bools bit-field;

  {{- else if eq .Type "text"}}
	struct {
		{{.TypeNative}}* utf8;
		size_t len; // octet count
	}

  {{- else if .TypeRef}}
	struct {{.TypeRef.NameNative}}

  {{- else}}
	{{.TypeNative}}

  {{- end}}{{/* type match */}}
 {{- else}}{{/* is list */}}
  {{- if eq .Type "text"}}
	struct {
		struct {
			{{.TypeNative}}* utf8;
			size_t len; // octet count
		}* list;
		size_t len; // element count
	}

  {{- else if .TypeRef}}
	struct {
		struct {{.TypeRef.NameNative}}* list;
		size_t len; // element count
	}

  {{- else}}
	struct {
		{{.TypeNative}}* list;
		size_t len; // element count
	}

  {{- end}}{{/* type match */}}
 {{- end}}{{/* is list */}} {{.NameNative}}{{if ne .ElementCount 0}}[{{.ElementCount}}]{{end}};
{{- end}}{{/* field range */}}
{{- if .HasBool}}

	// Bit field for booleans.
	unsigned int bools;
{{- end}}
};

{{- if .HasBool}}
// Boolean fields of struct {{.NameNative}}.
{{- range .Fields}}{{if eq .Type "bool"}}
#define {{.NameNative}} (1 << {{.BoolIndex}})
{{- end}}{{end}}
{{- end}}{{/* has boolean */}}

// octet boundaries for {{.NameNative}}_marshal output
#define {{.NameNative}}_marshal_min {{.FixedSize}}
#define {{.NameNative}}_marshal_max {{if .SizeMax}}{{.SizeMax}}{{else}}4096{{end}}

// Encode a struct as Colfer into a buffer. The encoder writes at least
// {{.NameNative}}_marshal_min, and at most {{.NameNative}}_marshal_max.{{if not .SizeMax}}
// The return is zero only when encoding halted on the size maximum.{{end}}
size_t
{{.NameNative}}_marshal(const struct {{.NameNative}}* o, void* buf);

// Decode a struct from a data pointer as Colfer. Unmarshal reads at least {{.SizeMin}}
// and at most 4096 octets. A zero return signals malformed data.{{if or .HasText .HasList}}
// {{if .HasText}}Each UTF-8 string includes a null terminator. {{end}}Caller owns the memory.{{end}}
size_t
{{.NameNative}}_unmarshal(struct {{.NameNative}}* o, const void* start);

{{end}}{{/* struct range */}}

{{- end}}{{/* package range */}}
#ifdef __cplusplus
} // extern "C"
#endif
