  /// Encodes as Colfer into [_buf].
  ///
  /// Throws [RangeError] if uint8, uint16, uint32 or int32 value overflows or
  /// underflows, or when the size of a list exceeds [colferListMax], or if a
  /// text, binary, or [_buf] exceeds [colferSizeMax]. Returns the number of
  /// bytes written.
  int marshalTo(Uint8List _buf) {
{{- if or .HasFloat .HasUint32 .HasTimestamp}}
    var _view = _buf.buffer.asByteData(_buf.offsetInBytes);
{{- end}}
    int _i = 0;
{{range .Fields}}
    {
{{if eq .Type "bool"}}
    if ({{.NameNative}}) {
      _buf[_i] = {{.Index}};
      _i++;
    }
{{- else if eq .Type "uint8"}}
    if ({{.NameNative}} != 0) {
      if ({{.NameNative}} > 255 || {{.NameNative}} < 0) {
        throw RangeError.range({{.NameNative}}, 0, 255, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _buf[_i+1] = {{.NameNative}};
      _i += 2;
    }
{{- else if eq .Type "uint16"}}
    if ({{.NameNative}} != 0) {
      if ({{.NameNative}} > 65535 || {{.NameNative}} < 0) {
        throw RangeError.range({{.NameNative}}, 0, 65535, '{{.String}}', 'colfer');
      }
      if ({{.NameNative}} < 256) {
        _buf[_i] = {{.Index}} | 128;
        _buf[_i+1] = {{.NameNative}};
        _i += 2;
      } else {
        _buf[_i] = {{.Index}};
        _buf[_i+1] = {{.NameNative}} >> 8;
        _buf[_i+2] = {{.NameNative}};
        _i += 3;
      }
    }
{{- else if eq .Type "uint32"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (_x > 4294967295 || _x < 0) {
        throw RangeError.range(_x, 0, 4294967295, '{{.String}}', 'colfer');
      }
      if (_x < 0x200000) {
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      } else {
        _buf[_i] = {{.Index}} | 128;
        _view.setInt32(_i+1, _x);
        _i += 5;
      }
    }
{{- else if eq .Type "uint64"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (0 < _x && _x < 0x2000000000000) {
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      } else {
        _buf[_i] = {{.Index}} | 128;
        _view.setInt64(_i+1, _x);
        _i += 9;
      }
    }
{{- else if eq .Type "int32"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (_x < 0) {
        if (_x < -2147483648) {
          throw RangeError.range(_x, -2147483648, null, '{{.String}}', 'colfer');
        }
        _buf[_i] = {{.Index}} | 128;
        _i++;
        _x = -_x;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      } else {
        if (_x > 2147483647) {
          throw RangeError.range(_x, null, 2147483647, '{{.String}}', 'colfer');
        }
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      }
    }
{{- else if eq .Type "int64"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (_x < 0) {
        _buf[_i] = {{.Index}} | 128;
        _i++;
        _x = -_x;
        if ({{.NameNative}} == _x) {
          _buf.fillRange(_i, 10, 128);
          _i += 9;
        } else {
          while (_x > 127) {
            _buf[_i] = (_x & 127) | 128;
            _i++;
            _x >>= 7;
          }
          _buf[_i] = _x;
          _i++;
        }
      } else {
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      }
    }
{{- else if eq .Type "float32"}}
{{- if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (final _vi in {{.NameNative}}) {
        if (_vi.isNaN) {
          _buf[_i] = 0x7f;
          _buf[_i+1] = 0xc0;
        } else {
          _view.setFloat32(_i, _vi);
        }
        _i += 4;
      }
    }
{{- else}}
    if ({{.NameNative}} != 0) {
      _buf[_i] = {{.Index}};
      if ({{.NameNative}}.isNaN) {
        _buf[_i+1] = 0x7f;
        _buf[_i+2] = 0xc0;
      } else {
        _view.setFloat32(_i+1, {{.NameNative}});
      }
      _i += 5;
    }
{{- end}}
{{- else if eq .Type "float64"}}
{{- if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (final _vi in {{.NameNative}}) {
        if (_vi.isNaN) {
          _buf[_i] = 0x7f;
          _buf[_i+1] = 0xf8;
          _buf[_i+7] = 1;
        } else {
          _view.setFloat64(_i, _vi);
        }
        _i += 8;
      }
    }
{{- else}}
    if ({{.NameNative}} != 0) {
      _buf[_i] = {{.Index}};
      if ({{.NameNative}}.isNaN) {
        _buf[_i+1] = 0x7f;
        _buf[_i+2] = 0xf8;
        _buf[_i+8] = 1;
      } else {
        _view.setFloat64(_i+1, {{.NameNative}});
      }
      _i += 9;
    }
{{- end}}
{{- else if eq .Type "timestamp"}}
    int _us = {{.NameNative}}.microsecondsSinceEpoch;
    if (_us != 0) {
      int _res = _us % 1000000;
      _us -= _res;
      int _s = _us ~/ 1E6;
      int _ns = _res * 1000;

      if (_s >= 1 << 33 || _us < 0) {
        _buf[_i] = {{.Index}} | 128;
        _view.setInt64(_i+1, _s);
        _i += 9;
      } else {
        _buf[_i] = {{.Index}};
        _view.setInt32(_i+1, _s);
        _i += 5;
      }
      _view.setInt32(_i, _ns);
      _i += 4;
    }
{{- else if eq .Type "text" "binary"}}
{{- if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (final _vi in {{.NameNative}}) {
{{- if eq .Type "text"}}
        var _v = utf8.encode(_vi);
{{- else}}
        var _v = _vi;
{{- end}}
        _x = _v.length;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _buf.setAll(_i + 1, _v);
        _i += 1 + _v.length;
      }
    }
{{- else}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      _buf[_i] = {{.Index}};
      _i++;
{{- if eq .Type "text"}}
      var _v = utf8.encode({{.NameNative}});
{{- else}}
      var _v = {{.NameNative}};
{{- end}}
      _x = _v.length;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _buf.setAll(_i + 1, _v);
      _i += 1 + _v.length;
    }
{{- end}}
{{- else if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (var _vi in {{.NameNative}}) {
        _i += _vi.marshalTo(Uint8List.view(_buf.buffer, _buf.offsetInBytes + _i));
      }
    }
{{- else}}
    if ({{.NameNative}} != null) {
      _buf[_i] = {{.Index}};
      _i++;
      _i += {{.NameNative}}!.marshalTo(Uint8List.view(_buf.buffer, _buf.offsetInBytes + _i));
    }
{{- end}}
  }
{{end}}

    _buf[_i] = 127;
    _i++;
    if (_i > colferSizeMax) {
      throw RangeError.range(_i, null, colferSizeMax, '{{.String}}', 'colfer');
    }
    return _i;
  }
