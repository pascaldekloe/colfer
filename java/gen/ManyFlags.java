package gen;

// Code generated by colf(1); DO NOT EDIT.
// The compiler used schema file test.colf.

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.StreamCorruptedException;
import java.io.WriteAbortedException;
import java.lang.reflect.Field;

/**
 * ManyFlags encodes over multiple bit-fields.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
public class ManyFlags
implements Serializable {

	public static final int B1_FLAG = 1 << 0;

	public static final int B2_FLAG = 1 << 1;

	public static final int B3_FLAG = 1 << 2;

	public static final int B4_FLAG = 1 << 3;

	public static final int B5_FLAG = 1 << 4;

	public static final int B6_FLAG = 1 << 5;

	public static final int B7_FLAG = 1 << 6;

	/**
	 * last in bit field
	 */
	public static final int B8_FLAG = 1 << 7;

	/**
	 * second bit-field
	 */
	public static final int B9_FLAG = 1 << 8;

	public static final int B10_FLAG = 1 << 9;

	public static final int B11_FLAG = 1 << 10;

	public static final int B12_FLAG = 1 << 11;

	public static final int B13_FLAG = 1 << 12;

	public static final int B14_FLAG = 1 << 13;

	public static final int B15_FLAG = 1 << 14;

	public static final int B16_FLAG = 1 << 15;

	/**
	 * third bit-field
	 */
	public static final int B17_FLAG = 1 << 16;

	/**
	 * Bit field for the booleans defined as *{@code _FLAG} constants above.
	 */
	public int _flags;

	/**
	 * because we can
	 */
	public int shift;

	public byte end;

	// Colfer internals
	private static final int FIXED_SIZE = 11;
	private static final int OVERFLOW_MAX = 0;
	private static final long[] COLFER_MASKS = {
		0,
		0xffL,
		0xffffL,
		0xffffffL,
		0xffffffffL,
		0xffffffffffL,
		0xffffffffffffL,
		0xffffffffffffffL,
		0xffffffffffffffffL,
	};
	private static final sun.misc.Unsafe java_unsafe;
	static {
		try {
			Field f = Class.class.forName("sun.misc.Unsafe").getDeclaredField("theUnsafe");
			f.setAccessible(true);
			java_unsafe = (sun.misc.Unsafe) f.get(null);
		} catch (Exception e) {
			throw new Error("Java unsafe API required", e);
		}
	}

	/**
	 * Encodings of this data structure have 3 bytes of overhead.
	 * @see "Colfer's “compact profile” header"
	 * @see #COLFER_MAX
	 */
	public static final int COLFER_MIN = 3;

	/**
	 * Encodings of this data structure are limited to 4 KiB in size.
	 * The actual limit for this specific version (as defined by {@link
	 * #MARSHAL_MAX}) could be less.
	 * @see "Colfer's “compact profile” limits"
	 * @see #COLFER_MIN
	 */
	public static final int COLFER_MAX = 4096;

	/**
	 * Encodings of this specific version of the data structure consist of
	 * exactly {@code MARSHAL_MAX} bytes.
	 * @see #MARSHAL_BUF_MAX
	 * @see #marshal(byte[],int)
	 */
	public static final int MARSHAL_MAX = FIXED_SIZE + OVERFLOW_MAX;

	/**
	 * Output buffers must have a capacity of at least this byte count.
	 * The threshold can be higher than {@link #MARSHAL_MAX} in some cases.
	 * @see #MARSHAL_BUF_MAX
	 * @see #marshal(byte[],int)
	 */
	public static final int MARSHAL_BUF_MIN = (FIXED_SIZE + OVERFLOW_MAX + 7) & ~7;

	/**
	 * Output buffer capacity beyound this byte count won't affect encoding.
	 * {@link #MARSHAL_BUF_MIN} ≤ {@code MARSHAL_BUF_MAX}
	 * @see #MARSHAL_MAX
	 * @see #MARSHAL_BUF_MIN
	 * @see #marshal(byte[],int)
	 */
	public static final int MARSHAL_BUF_MAX = java.lang.Math.max(MARSHAL_MAX, MARSHAL_BUF_MIN);

	/**
	 * Unmarshal buffers must have a capacity of at least this byte count.
	 * {@link #COLFER_MIN} ≤ {@code UNMARSHAL_BUF_MIN} ≤ {@link #COLFER_MAX}
	 * @see #unmarshal(byte[],int,int)
	 */
	public static final int UNMARSHAL_BUF_MIN = (512 + OVERFLOW_MAX + 7) & ~7;

	/** Default constructor. */
	public ManyFlags() { }

	/** {@link java.io.InputStream} reader. */
	public static class Unmarshaller {

		/** The data source. */
		private final InputStream in;

		/** The read buffer. */
		private final byte[] buf;

		/** The start index in {@link #buf}. */
		private int off;

		/** The number of bytes in {@link #buf} (since {@link #off}). */
		private int len;


		/**
		 * Deserializes the following object.
		 * @param in the data source.
		 * @param bufn the buffer size in bytes.
		 */
		public Unmarshaller(InputStream in, int bufn) {
			this.in = in;
			this.buf = new byte[bufn < COLFER_MAX ? COLFER_MAX : bufn];
		}

		/**
		 * Unmarshals next in line.
		 * @return the result or {@code null} when EOF.
		 * @throws java.io.IOException from the {@code java.io.InputStream}.
		 * @throws java.io.EOFException on a partial record.
		 * @throws java.io.StreamCorruptedException when the data does not match this object's schema.
		 */
		public ManyFlags nextOrNull() throws IOException {
			if (len == 0) {
				off = 0;
				if (!read()) return null; // EOF
			} else if (buf.length - off < COLFER_MIN) {
				System.arraycopy(buf, off, buf, 0, len);
				off = 0;
			}

			ManyFlags o = new ManyFlags();
			while (true) {
				int size = o.unmarshal(buf, off, len);
				if (size > 3) {
					off += size;
					len -= size;
					return o;
				}
				if (size != 0)
					throw new StreamCorruptedException("illegal Colfer encoding");
				if (off != 0) {
					System.arraycopy(buf, off, buf, 0, len);
					off = 0;
				}
				if (!read())
					throw new EOFException("partial Colfer encoding");
			}
		}

		/** Buffer more data. The return is {@code false} on EOF. */
		private boolean read() throws IOException {
			int pos = this.off + this.len;
			int n = in.read(buf, pos, buf.length - pos);
			if (n < 0) return false;
			this.len += n;
			return true;
		}

	}

	/**
	 * Writes the Colfer encoding of {@code this} data structure to a buffer
	 * at an offset. Marshalling requires at least {@link #MARSHAL_BUF_MIN}
	 * of space since the offset, as in {@code buf.length} − {@code off} ≥
	 * {@code ManyFlags.MARSHAL_BUF_MIN}.
	 * Preferably, use {@link #MARSHAL_BUF_MAX}—not {@link #MARSHAL_MAX}—to
	 * prevent any buffer overflows from happening.
	 *
	 * Encoding of this specific version of the data structure always
	 * succeeds with a return of exactly {@link #MARSHAL_MAX}. However,
	 * future revisions may return zero ({@code 0) on any the following.
	 * <ul>
	 * <li>buffer overflow—only possible below {@link #MARSHAL_BUF_MAX}
	 * <li>{@link #COLFER_MAX} exceeded—not possible yet
	 * <li>a text exceeds 255 bytes of UTF-8—none present yet
	 * <li>a list exceeds 255 entries—none present yet
	 * </ul>
	 *
	 * @param buf the output buffer.
	 * @param off the start index [offset] in the buffer.
	 * @return either the encoding size or {@code 0}.
	 * @throws IllegalArgumentException on {@link #MARSHAL_BUF_MIN} breach.
	 */
	public int marshal(byte[] buf, int off) {
		if (off < 0 || buf.length - off < MARSHAL_BUF_MIN)
			throw new IllegalArgumentException("insufficient buffer capacity");

		// write index at variable section
		int w = off + FIXED_SIZE;
		long word0 = FIXED_SIZE << 15;

		// pack .b1 bool
		word0 |= (long)this._flags << 24-0 & 0xffl<<24;

		// pack .b2 bool
		// travels for free

		// pack .b3 bool
		// travels for free

		// pack .b4 bool
		// travels for free

		// pack .b5 bool
		// travels for free

		// pack .b6 bool
		// travels for free

		// pack .b7 bool
		// travels for free

		// pack .b8 bool
		// travels for free

		// pack .b9 bool
		word0 |= (long)this._flags << 32-8 & 0xffl<<32;

		// pack .b10 bool
		// travels for free

		// pack .shift opaque32
		long v10 = Integer.toUnsignedLong(this.shift);
		word0 |= v10 << 40;
		long word1 = v10 >>> (64-40);

		// pack .b11 bool
		// travels for free

		// pack .b12 bool
		// travels for free

		// pack .b13 bool
		// travels for free

		// pack .b14 bool
		// travels for free

		// pack .b15 bool
		// travels for free

		// pack .b16 bool
		// travels for free

		// pack .b17 bool
		word1 |= (long)this._flags >>> 16-8 & 0xffl<<8;

		// pack .end opaque8
		word1 |= Byte.toUnsignedLong(this.end) << 16;

		// write fixed positions
		int size = w - off;
		word0 |= size << 3;
		java_unsafe.putLong(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (0 * 8), word0);
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (1 * 8) + 0,
			(byte)(word1 >>> (0 * 8)));
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (1 * 8) + 1,
			(byte)(word1 >>> (1 * 8)));
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (1 * 8) + 2,
			(byte)(word1 >>> (2 * 8)));
		return size;
	}

	/**
	 * Reads a Colfer encoding of {@code this} data strucure from a buffer
	 * range. All fields are updated, regardless of their value beforehand.
	 * Unmarshalling requires at least {@link #UNMARSHAL_BUF_MIN} of space
	 * since the offset, as in {@code buf.length} − {@code off} ≥ {@code
	 * ManyFlags.UNMARSHAL_BUF_MIN}.
	 * Preferably, use {@link #COLFER_MAX}—not {@link #MARSHAL_MAX}—to
	 * prevent any buffer underflows from happening.
	 *
	 * The return is zero ({@code 0}) on incomplete data, one ({@code 1}) on
	 * malformed data, or in range {@link #COLFER_MIN}..{@link #COLFER_MAX}
	 * on valid data. Note that the return may be less than {@code len}.
	 * Data selection within the buffer, including its exceptions, matches
	 * Java's standard {@link java.io.InputStream#read(byte[],int,int) read}
	 * and {@link java.io.OutputStream#write(byte[],int,int) write}.
	 *
	 * @param buf the input buffer.
	 * @param off the start index [offset] in the buffer.
	 * @param len the number of bytes available since the offset.
	 * @return either the encoding size, or {@code 0}, or {code 1}.
	 * @throws IllegalArgumentException when the buffer capacity minus its
	 *         offset is less than {@link #UNMARSHAL_BUF_MIN}.
	 * @throws IndexOutOfBoundsException when the buffer capacity does not
	 *         match the offset–length combination.
	 */
	public int unmarshal(byte[] buf, int off, int len) {
		if ((off | len) < 0 || buf.length - off < len)
			throw new IndexOutOfBoundsException("range beyond buffer dimensions");
		if (buf.length - off < UNMARSHAL_BUF_MIN)
			throw new IllegalArgumentException("insufficient buffer capacity");
		final long word0 = java_unsafe.getLong(buf, (long)off + java_unsafe.ARRAY_LONG_BASE_OFFSET + (0L * 8L));
		final long word1 = java_unsafe.getLong(buf, (long)off + java_unsafe.ARRAY_LONG_BASE_OFFSET + (1L * 8L));

		final int size = (int)word0>>>3 & 0xfff;
		final int fixed_size = (int)word0>>>15 & 0x1ff;
		if (len < COLFER_MIN || size > len) return 0;

		// read index at variable section
		int r = off + fixed_size;
		// unpack .b1 bool
		this._flags = (int)(word0 >>> 24) & 0xff;
		// unpack .b2 bool
		// travels for free
		// unpack .b3 bool
		// travels for free
		// unpack .b4 bool
		// travels for free
		// unpack .b5 bool
		// travels for free
		// unpack .b6 bool
		// travels for free
		// unpack .b7 bool
		// travels for free
		// unpack .b8 bool
		// travels for free
		// unpack .b9 bool
		this._flags |= (int)(word0 >>> 32-8) & 0xff<<8;
		// unpack .b10 bool
		// travels for free
		// unpack .shift opaque32
		int v10 = (int)(word0>>>40 | word1<<(64-40));
		this.shift = v10;
		// unpack .b11 bool
		// travels for free
		// unpack .b12 bool
		// travels for free
		// unpack .b13 bool
		// travels for free
		// unpack .b14 bool
		// travels for free
		// unpack .b15 bool
		// travels for free
		// unpack .b16 bool
		// travels for free
		// unpack .b17 bool
		this._flags |= (int)(word1 << 16-8) & 0xff<<16;
		// unpack .end opaque8
		this.end = (byte)(word1 >> 16);



		// clear/undo absent fields
		if (fixed_size < FIXED_SIZE) switch (fixed_size) {
			default:
				return 1;
			case 10:
				this.end = 0;
			case 9:
				this._flags &= (1 << 16) - 1;
			case 5:
				this.shift = 0;
			case 4:
				this._flags &= (1 << 8) - 1;
		}

		return size;
	}

	/**
	 * {@link java.io.Serializable} version number reflects the fields present.
	 * Values in range [0, 127] belong to Colfer version 1.
	 */
	private static final long serialVersionUID = 19L << 7;

	/**
	 * {@link java.io.Serializable} as Colfer.
	 * @param out serial destination.
	 * @throws java.io.IOException a {@link java.io.WriteAbortedException}
	 */
	private void writeObject(ObjectOutputStream out) throws IOException {
		byte[] buf = new byte[MARSHAL_BUF_MAX];
		int n = marshal(buf, 0);
		try {
			out.write(buf, 0, n);
		} catch (IOException e) {
			throw new WriteAbortedException("halt on Colfer payload", e);
		}
	}

	/**
	 * {@link java.io.Serializable} as Colfer.
	 * @param in serial source.
	 * @throws ClassNotFoundException never.
	 * @throws java.io.IOException either from {@code in} or a
	 *  {@link java.io.StreamCorruptedException}.
	 */
	private void readObject(ObjectInputStream in)
	throws ClassNotFoundException, IOException {
		byte[] buf = new byte[COLFER_MAX];
		in.readFully(buf, 0, COLFER_MIN);
		int head = java_unsafe.getInt(buf, java_unsafe.ARRAY_BYTE_BASE_OFFSET);
		int size = head>>>3 & 0xfff;
		in.readFully(buf, COLFER_MIN, size - COLFER_MIN);
		if (unmarshal(buf, 0, size) != size)
			throw new StreamCorruptedException("not a Colfer encoding of ManyFlags");
	}

	/**
	 * Gets gen.ManyFlags.b1.
	 * @return the value.
	 */
	public boolean getB1() {
		return (this._flags & B1_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b1.
	 * @param value the replacement.
	 */
	public void setB1(boolean value) {
		if (value) {
			this._flags |= B1_FLAG;
		} else {
			this._flags &= ~B1_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b1.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB1(boolean value) {
		setB1(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b2.
	 * @return the value.
	 */
	public boolean getB2() {
		return (this._flags & B2_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b2.
	 * @param value the replacement.
	 */
	public void setB2(boolean value) {
		if (value) {
			this._flags |= B2_FLAG;
		} else {
			this._flags &= ~B2_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b2.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB2(boolean value) {
		setB2(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b3.
	 * @return the value.
	 */
	public boolean getB3() {
		return (this._flags & B3_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b3.
	 * @param value the replacement.
	 */
	public void setB3(boolean value) {
		if (value) {
			this._flags |= B3_FLAG;
		} else {
			this._flags &= ~B3_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b3.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB3(boolean value) {
		setB3(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b4.
	 * @return the value.
	 */
	public boolean getB4() {
		return (this._flags & B4_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b4.
	 * @param value the replacement.
	 */
	public void setB4(boolean value) {
		if (value) {
			this._flags |= B4_FLAG;
		} else {
			this._flags &= ~B4_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b4.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB4(boolean value) {
		setB4(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b5.
	 * @return the value.
	 */
	public boolean getB5() {
		return (this._flags & B5_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b5.
	 * @param value the replacement.
	 */
	public void setB5(boolean value) {
		if (value) {
			this._flags |= B5_FLAG;
		} else {
			this._flags &= ~B5_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b5.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB5(boolean value) {
		setB5(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b6.
	 * @return the value.
	 */
	public boolean getB6() {
		return (this._flags & B6_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b6.
	 * @param value the replacement.
	 */
	public void setB6(boolean value) {
		if (value) {
			this._flags |= B6_FLAG;
		} else {
			this._flags &= ~B6_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b6.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB6(boolean value) {
		setB6(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b7.
	 * @return the value.
	 */
	public boolean getB7() {
		return (this._flags & B7_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b7.
	 * @param value the replacement.
	 */
	public void setB7(boolean value) {
		if (value) {
			this._flags |= B7_FLAG;
		} else {
			this._flags &= ~B7_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b7.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB7(boolean value) {
		setB7(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b8.
	 * @return the value.
	 */
	public boolean getB8() {
		return (this._flags & B8_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b8.
	 * @param value the replacement.
	 */
	public void setB8(boolean value) {
		if (value) {
			this._flags |= B8_FLAG;
		} else {
			this._flags &= ~B8_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b8.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB8(boolean value) {
		setB8(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b9.
	 * @return the value.
	 */
	public boolean getB9() {
		return (this._flags & B9_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b9.
	 * @param value the replacement.
	 */
	public void setB9(boolean value) {
		if (value) {
			this._flags |= B9_FLAG;
		} else {
			this._flags &= ~B9_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b9.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB9(boolean value) {
		setB9(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b10.
	 * @return the value.
	 */
	public boolean getB10() {
		return (this._flags & B10_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b10.
	 * @param value the replacement.
	 */
	public void setB10(boolean value) {
		if (value) {
			this._flags |= B10_FLAG;
		} else {
			this._flags &= ~B10_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b10.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB10(boolean value) {
		setB10(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.shift.
	 * @return the value.
	 */
	public int getShift() {
		return this.shift;
	}
	/**
	 * Sets gen.ManyFlags.shift.
	 * @param value the replacement.
	 */
	public void setShift(int value) {
		this.shift = value;
	}

	/**
	 * Sets gen.ManyFlags.shift.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withShift(int value) {
		setShift(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b11.
	 * @return the value.
	 */
	public boolean getB11() {
		return (this._flags & B11_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b11.
	 * @param value the replacement.
	 */
	public void setB11(boolean value) {
		if (value) {
			this._flags |= B11_FLAG;
		} else {
			this._flags &= ~B11_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b11.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB11(boolean value) {
		setB11(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b12.
	 * @return the value.
	 */
	public boolean getB12() {
		return (this._flags & B12_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b12.
	 * @param value the replacement.
	 */
	public void setB12(boolean value) {
		if (value) {
			this._flags |= B12_FLAG;
		} else {
			this._flags &= ~B12_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b12.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB12(boolean value) {
		setB12(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b13.
	 * @return the value.
	 */
	public boolean getB13() {
		return (this._flags & B13_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b13.
	 * @param value the replacement.
	 */
	public void setB13(boolean value) {
		if (value) {
			this._flags |= B13_FLAG;
		} else {
			this._flags &= ~B13_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b13.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB13(boolean value) {
		setB13(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b14.
	 * @return the value.
	 */
	public boolean getB14() {
		return (this._flags & B14_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b14.
	 * @param value the replacement.
	 */
	public void setB14(boolean value) {
		if (value) {
			this._flags |= B14_FLAG;
		} else {
			this._flags &= ~B14_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b14.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB14(boolean value) {
		setB14(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b15.
	 * @return the value.
	 */
	public boolean getB15() {
		return (this._flags & B15_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b15.
	 * @param value the replacement.
	 */
	public void setB15(boolean value) {
		if (value) {
			this._flags |= B15_FLAG;
		} else {
			this._flags &= ~B15_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b15.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB15(boolean value) {
		setB15(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b16.
	 * @return the value.
	 */
	public boolean getB16() {
		return (this._flags & B16_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b16.
	 * @param value the replacement.
	 */
	public void setB16(boolean value) {
		if (value) {
			this._flags |= B16_FLAG;
		} else {
			this._flags &= ~B16_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b16.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB16(boolean value) {
		setB16(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.b17.
	 * @return the value.
	 */
	public boolean getB17() {
		return (this._flags & B17_FLAG) != 0;
	}

	/**
	 * Sets gen.ManyFlags.b17.
	 * @param value the replacement.
	 */
	public void setB17(boolean value) {
		if (value) {
			this._flags |= B17_FLAG;
		} else {
			this._flags &= ~B17_FLAG;
		}
	}

	/**
	 * Sets gen.ManyFlags.b17.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withB17(boolean value) {
		setB17(value);
		return this;
	}

	/**
	 * Gets gen.ManyFlags.end.
	 * @return the value.
	 */
	public byte getEnd() {
		return this.end;
	}
	/**
	 * Sets gen.ManyFlags.end.
	 * @param value the replacement.
	 */
	public void setEnd(byte value) {
		this.end = value;
	}

	/**
	 * Sets gen.ManyFlags.end.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public ManyFlags withEnd(byte value) {
		setEnd(value);
		return this;
	}

	/**
	 * Deep hash is consistent with {@link #equals(Object)}.
	 * @return the standard Java digest.
	 */
	@Override
	public final int hashCode() {
		int h = 1;
		h = h * 31 + this.shift;
		h = h * 31 + (int)this.end;
		h = h * 31 + this._flags;
		return h;
	}

	/**
	 * Deep comparison is consistent with {@link #hashCode}.
	 * @param o anything, including {@code null}.
	 * @return the type and content match.
	 */
	@Override
	public final boolean equals(Object o) {
		return o instanceof ManyFlags && equals((ManyFlags)o);
	}

	/**
	 * Typed alternative to {@link #equals(Object)}.
	 * @param o same class or {@code null}.
	 * @return the content match.
	 */
	public final boolean equals(ManyFlags o) {
		if (o == null) return false;
		if (o == this) return true;

		return this._flags == o._flags
			&& this.shift == o.shift
			&& this.end == o.end;
	}
}
