package gen;

// Code generated by colf(1); DO NOT EDIT.
// The compiler used schema file test.colf.

import java.io.EOFException;
import java.io.IOException;
import java.io.InputStream;
import java.io.InvalidObjectException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.io.StreamCorruptedException;
import java.io.WriteAbortedException;
import java.lang.reflect.Field;

/**
 * DromedaryCase mixes name conventions.
 * Its serial size has a natural limit.
 * @author generated by colf(1)
 * @see <a href="https://github.com/pascaldekloe/colfer">Colfer's home</a>
 */
@SuppressWarnings(
value = "fallthrough"
)
public class DromedaryCase
implements Serializable {

	/**
	 * title-case option
	 */
	@Deprecated()
	// @javax.validation.constraints.NotNull
	public int pascalCase;

	/**
	 * best-case scenario
	 */
	public byte withSnake;

	// Colfer internals
	private static final int FIXED_SIZE = 5;
	private static final int OVERFLOW_MAX = 8;
	private static final long[] COLFER_MASKS = {
		0,
		0xffL,
		0xffffL,
		0xffffffL,
		0xffffffffL,
		0xffffffffffL,
		0xffffffffffffL,
		0xffffffffffffffL,
		0xffffffffffffffffL,
	};
	private static final sun.misc.Unsafe java_unsafe;
	static {
		try {
			Field f = Class.class.forName("sun.misc.Unsafe").getDeclaredField("theUnsafe");
			f.setAccessible(true);
			java_unsafe = (sun.misc.Unsafe) f.get(null);
		} catch (Exception e) {
			throw new Error("Java unsafe API required", e);
		}
	}

	/**
	 * Encodings of this data structure have 3 bytes of overhead.
	 * @see "Colfer's “compact profile” header"
	 * @see #COLFER_MAX
	 */
	public static final int COLFER_MIN = 3;

	/**
	 * Encodings of this data structure are limited to 4 KiB in size.
	 * The actual limit for this specific version (as defined by {@link
	 * #MARSHAL_MAX}) could be less.
	 * @see "Colfer's “compact profile” limits"
	 * @see #COLFER_MIN
	 */
	public static final int COLFER_MAX = 4096;

	/**
	 * Encodings of this specific version of the data structure consist of
	 * at most {@code MARSHAL_MAX} bytes.
	 * @see #MARSHAL_BUF_MAX
	 * @see #marshal(byte[],int)
	 */
	public static final int MARSHAL_MAX = FIXED_SIZE + OVERFLOW_MAX;

	/**
	 * Output buffers must have a capacity of at least this byte count.
	 * The threshold can be higher than {@link #MARSHAL_MAX} in some cases.
	 * @see #MARSHAL_BUF_MAX
	 * @see #marshal(byte[],int)
	 */
	public static final int MARSHAL_BUF_MIN = (FIXED_SIZE + OVERFLOW_MAX + 7) & ~7;

	/**
	 * Output buffer capacity beyound this byte count won't affect encoding.
	 * {@link #MARSHAL_BUF_MIN} ≤ {@code MARSHAL_BUF_MAX}
	 * @see #MARSHAL_MAX
	 * @see #MARSHAL_BUF_MIN
	 * @see #marshal(byte[],int)
	 */
	public static final int MARSHAL_BUF_MAX = java.lang.Math.max(MARSHAL_MAX, MARSHAL_BUF_MIN);

	/**
	 * Unmarshal buffers must have a capacity of at least this byte count.
	 * {@link #COLFER_MIN} ≤ {@code UNMARSHAL_BUF_MIN} ≤ {@link #COLFER_MAX}
	 * @see #unmarshal(byte[],int,int)
	 */
	public static final int UNMARSHAL_BUF_MIN = (512 + OVERFLOW_MAX + 7) & ~7;

	/** Default constructor. */
	public DromedaryCase() { }

	/** {@link java.io.InputStream} reader. */
	public static class Unmarshaller {

		/** The data source. */
		private final InputStream in;

		/** The read buffer. */
		private final byte[] buf;

		/** The start index in {@link #buf}. */
		private int off;

		/** The number of bytes in {@link #buf} (since {@link #off}). */
		private int len;


		/**
		 * Deserializes the following object.
		 * @param in the data source.
		 * @param bufn the buffer size in bytes.
		 */
		public Unmarshaller(InputStream in, int bufn) {
			this.in = in;
			this.buf = new byte[bufn < COLFER_MAX ? COLFER_MAX : bufn];
		}

		/**
		 * Unmarshals next in line.
		 * @return the result or {@code null} when EOF.
		 * @throws java.io.IOException from the {@code java.io.InputStream}.
		 * @throws java.io.EOFException on a partial record.
		 * @throws java.io.StreamCorruptedException when the data does not match this object's schema.
		 */
		public DromedaryCase nextOrNull() throws IOException {
			if (len == 0) {
				off = 0;
				if (!read()) return null; // EOF
			} else if (buf.length - off < COLFER_MIN) {
				System.arraycopy(buf, off, buf, 0, len);
				off = 0;
			}

			DromedaryCase o = new DromedaryCase();
			while (true) {
				int size = o.unmarshal(buf, off, len);
				if (size > 3) {
					off += size;
					len -= size;
					return o;
				}
				if (size != 0)
					throw new StreamCorruptedException("illegal Colfer encoding");
				if (off != 0) {
					System.arraycopy(buf, off, buf, 0, len);
					off = 0;
				}
				if (!read())
					throw new EOFException("partial Colfer encoding");
			}
		}

		/** Buffer more data. The return is {@code false} on EOF. */
		private boolean read() throws IOException {
			int pos = this.off + this.len;
			int n = in.read(buf, pos, buf.length - pos);
			if (n < 0) return false;
			this.len += n;
			return true;
		}

	}

	/**
	 * Writes the Colfer encoding of {@code this} data structure to a buffer
	 * at an offset. Marshalling requires at least {@link #MARSHAL_BUF_MIN}
	 * of space since the offset, as in {@code buf.length} − {@code off} ≥
	 * {@code DromedaryCase.MARSHAL_BUF_MIN}.
	 * Preferably, use {@link #MARSHAL_BUF_MAX}—not {@link #MARSHAL_MAX}—to
	 * prevent any buffer overflows from happening.
	 *
	 * The return is zero ({@code 0}) on any of the following, exclusively.
	 * <ul>
	 * <li>buffer overflow—only possible below {@link #MARSHAL_BUF_MAX}
	 * <li>{@link #COLFER_MAX} exceeded
	 * <li>a text exceeds 255 bytes of UTF-8—none present yet
	 * <li>a list exceeds 255 entries—none present yet
	 * </ul>
	 *
	 * @param buf the output buffer.
	 * @param off the start index [offset] in the buffer.
	 * @return either the encoding size or {@code 0}.
	 * @throws IllegalArgumentException on {@link #MARSHAL_BUF_MIN} breach.
	 */
	public int marshal(byte[] buf, int off) {
		if (off < 0 || buf.length - off < MARSHAL_BUF_MIN)
			throw new IllegalArgumentException("insufficient buffer capacity");

		// write index at variable section
		int w = off + FIXED_SIZE;
		long word0 = FIXED_SIZE << 15;

		// pack .PascalCase int32
		long v0 = Integer.toUnsignedLong(this.pascalCase>>31 ^ this.pascalCase<<1);
		if ((v0 & ~127L) == 0) {
			v0 = v0 << 1 | 1L;
		} else {
			java_unsafe.putLong(buf, java_unsafe.ARRAY_BYTE_BASE_OFFSET + w, v0);
			int bitCount = 64 - Long.numberOfLeadingZeros(v0);
			int tailSize = (((bitCount - 1) >>> 3) + bitCount) >>> 3;
			w += tailSize;
			v0 >>>= (tailSize << 3) - 1;
			v0 = (v0 | 1L) << tailSize & 0xff;
		}
		word0 |= v0 << 24;

		// pack .with_snake opaque8
		word0 |= Byte.toUnsignedLong(this.withSnake) << 32;

		// write fixed positions
		int size = w - off;
		word0 |= size << 3;
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (0 * 8) + 0,
			(byte)(word0 >>> (0 * 8)));
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (0 * 8) + 1,
			(byte)(word0 >>> (1 * 8)));
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (0 * 8) + 2,
			(byte)(word0 >>> (2 * 8)));
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (0 * 8) + 3,
			(byte)(word0 >>> (3 * 8)));
		java_unsafe.putByte(buf, off + java_unsafe.ARRAY_BYTE_BASE_OFFSET + (0 * 8) + 4,
			(byte)(word0 >>> (4 * 8)));
		return size;
	}

	/**
	 * Reads a Colfer encoding of {@code this} data strucure from a buffer
	 * range. All fields are updated, regardless of their value beforehand.
	 * Unmarshalling requires at least {@link #UNMARSHAL_BUF_MIN} of space
	 * since the offset, as in {@code buf.length} − {@code off} ≥ {@code
	 * DromedaryCase.UNMARSHAL_BUF_MIN}.
	 * Preferably, use {@link #COLFER_MAX}—not {@link #MARSHAL_MAX}—to
	 * prevent any buffer underflows from happening.
	 *
	 * The return is zero ({@code 0}) on incomplete data, one ({@code 1}) on
	 * malformed data, or in range {@link #COLFER_MIN}..{@link #COLFER_MAX}
	 * on valid data. Note that the return may be less than {@code len}.
	 * Data selection within the buffer, including its exceptions, matches
	 * Java's standard {@link java.io.InputStream#read(byte[],int,int) read}
	 * and {@link java.io.OutputStream#write(byte[],int,int) write}.
	 *
	 * @param buf the input buffer.
	 * @param off the start index [offset] in the buffer.
	 * @param len the number of bytes available since the offset.
	 * @return either the encoding size, or {@code 0}, or {code 1}.
	 * @throws IllegalArgumentException when the buffer capacity minus its
	 *         offset is less than {@link #UNMARSHAL_BUF_MIN}.
	 * @throws IndexOutOfBoundsException when the buffer capacity does not
	 *         match the offset–length combination.
	 */
	public int unmarshal(byte[] buf, int off, int len) {
		if ((off | len) < 0 || buf.length - off < len)
			throw new IndexOutOfBoundsException("range beyond buffer dimensions");
		if (buf.length - off < UNMARSHAL_BUF_MIN)
			throw new IllegalArgumentException("insufficient buffer capacity");
		final long word0 = java_unsafe.getLong(buf, (long)off + java_unsafe.ARRAY_LONG_BASE_OFFSET + (0L * 8L));

		final int size = (int)word0>>>3 & 0xfff;
		final int fixed_size = (int)word0>>>15 & 0x1ff;
		if (len < COLFER_MIN || size > len) return 0;

		// read index at variable section
		int r = off + fixed_size;
		// unpack .PascalCase int32
		long v0 = word0 >>> (24 + 1) & 0x7f;
		if ((1L << 24 & word0) == 0) {
			long tail = java_unsafe.getLong(buf, (long)(
				java_unsafe.ARRAY_BYTE_BASE_OFFSET + r));
			int tailSize = Long.numberOfTrailingZeros(v0 | 0x80) + 1;
			r += tailSize;
			v0 <<= (tailSize << 3) - tailSize;
			v0 |= tail & java_unsafe.getLong(COLFER_MASKS, (long)(
				java_unsafe.ARRAY_LONG_BASE_OFFSET +
				tailSize * java_unsafe.ARRAY_LONG_INDEX_SCALE));
		}
		this.pascalCase = (int)(v0 >>> 1) ^ -(int)(v0 & 1L);
		// unpack .with_snake opaque8
		this.withSnake = (byte)(word0 >> 32);



		// clear/undo absent fields
		if (fixed_size < FIXED_SIZE) switch (fixed_size) {
			default:
				return 1;
			case 4:
				this.withSnake = 0;
		}

		return size;
	}

	/**
	 * {@link java.io.Serializable} version number reflects the fields present.
	 * Values in range [0, 127] belong to Colfer version 1.
	 */
	private static final long serialVersionUID = 2L << 7;

	/**
	 * {@link java.io.Serializable} as Colfer.
	 * @param out serial destination.
	 * @throws java.io.IOException a {@link java.io.WriteAbortedException}
	 */
	private void writeObject(ObjectOutputStream out) throws IOException {
		byte[] buf = new byte[MARSHAL_BUF_MAX];
		int n = marshal(buf, 0);
		try {
			out.write(buf, 0, n);
		} catch (IOException e) {
			throw new WriteAbortedException("halt on Colfer payload", e);
		}
	}

	/**
	 * {@link java.io.Serializable} as Colfer.
	 * @param in serial source.
	 * @throws ClassNotFoundException never.
	 * @throws java.io.IOException either from {@code in} or a
	 *  {@link java.io.StreamCorruptedException}.
	 */
	private void readObject(ObjectInputStream in)
	throws ClassNotFoundException, IOException {
		byte[] buf = new byte[COLFER_MAX];
		in.readFully(buf, 0, COLFER_MIN);
		int head = java_unsafe.getInt(buf, java_unsafe.ARRAY_BYTE_BASE_OFFSET);
		int size = head>>>3 & 0xfff;
		in.readFully(buf, COLFER_MIN, size - COLFER_MIN);
		if (unmarshal(buf, 0, size) != size)
			throw new StreamCorruptedException("not a Colfer encoding of dromedaryCase");
	}

	/**
	 * Gets gen.dromedaryCase.PascalCase.
	 * @return the value.
	 */
	public int getPascalCase() {
		return this.pascalCase;
	}
	/**
	 * Sets gen.dromedaryCase.PascalCase.
	 * @param value the replacement.
	 */
	public void setPascalCase(int value) {
		this.pascalCase = value;
	}

	/**
	 * Sets gen.dromedaryCase.PascalCase.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public DromedaryCase withPascalCase(int value) {
		setPascalCase(value);
		return this;
	}

	/**
	 * Gets gen.dromedaryCase.with_snake.
	 * @return the value.
	 */
	public byte getWithSnake() {
		return this.withSnake;
	}
	/**
	 * Sets gen.dromedaryCase.with_snake.
	 * @param value the replacement.
	 */
	public void setWithSnake(byte value) {
		this.withSnake = value;
	}

	/**
	 * Sets gen.dromedaryCase.with_snake.
	 * @param value the replacement.
	 * @return {@code this}.
	 */
	public DromedaryCase withWithSnake(byte value) {
		setWithSnake(value);
		return this;
	}

	/**
	 * Deep hash is consistent with {@link #equals(Object)}.
	 * @return the standard Java digest.
	 */
	@Override
	public final int hashCode() {
		int h = 1;
		h = h * 31 + this.pascalCase;
		h = h * 31 + (int)this.withSnake;
		return h;
	}

	/**
	 * Deep comparison is consistent with {@link #hashCode}.
	 * @param o anything, including {@code null}.
	 * @return the type and content match.
	 */
	@Override
	public final boolean equals(Object o) {
		return o instanceof DromedaryCase && equals((DromedaryCase)o);
	}

	/**
	 * Typed alternative to {@link #equals(Object)}.
	 * @param o same class or {@code null}.
	 * @return the content match.
	 */
	public final boolean equals(DromedaryCase o) {
		if (o == null) return false;
		if (o == this) return true;

		return this.pascalCase == o.pascalCase
			&& this.withSnake == o.withSnake;
	}
}
