package colfer

import (
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"text/template"

	"github.com/pascaldekloe/name"
)

// dartKeywords are the reserved tokens for Dart code.
// Some entries are redundant due to the use of a Go parser.
var dartKeywords = map[string]struct{}{
	"abstract": {}, "as": {}, "assert": {}, "async": {}, "await": {},
	"break": {}, "case": {}, "catch": {}, "class": {}, "const": {},
	"continue": {}, "covariant": {}, "default": {}, "deferred": {},
	"do": {}, "dynamic": {}, "else": {}, "enum": {}, "export": {},
	"extends": {}, "extension": {}, "external": {}, "factory": {},
	"false": {}, "final": {}, "finally": {}, "for": {}, "Function": {},
	"get": {}, "hide": {}, "if": {}, "implements": {}, "import": {},
	"in": {}, "interface": {}, "is": {}, "library": {}, "mixin": {},
	"new": {}, "null": {}, "on": {}, "operator": {}, "part": {},
	"rethrow": {}, "return": {}, "set": {}, "show": {}, "static": {},
	"super": {}, "switch": {}, "sync": {}, "this": {}, "throw": {},
	"true": {}, "try": {}, "typedef": {}, "var": {}, "void": {},
	"while": {}, "with": {}, "yield": {},
	"other": {}, "marshalTo": {}, "marshalLen": {}, "unmarshal": {},
}

// GenerateDart writes the code into file "Colfer.dart".
func GenerateDart(basedir string, packages Packages) error {
	if err := os.MkdirAll(basedir, os.ModeDir|os.ModePerm); err != nil {
		return err
	}

	t := template.New("dart-code")
	template.Must(t.Parse(dartCode))
	template.Must(t.New("marshal").Parse(dartMarshal))
	template.Must(t.New("marshal-len").Parse(dartMarshalLen))
	template.Must(t.New("unmarshal").Parse(dartUnmarshal))

	nativeTypes := map[string]string{
		"text":      "String",
		"binary":    "Uint8List",
		"timestamp": "DateTime?",
		"uint8":     "int",
		"uint16":    "int",
		"uint32":    "int",
		"uint64":    "int",
		"int32":     "int",
		"int64":     "int",
		"float32":   "double",
		"float64":   "double",
	}
	nativeListTypes := map[string]string{
		"uint8":   "Uint8List",
		"uint16":  "Uint16List",
		"uint32":  "Uint32List",
		"uint64":  "Uint64List",
		"int32":   "Int32List",
		"int64":   "Int64List",
		"float32": "Float32List",
		"float64": "Float64List",
	}

	for _, p := range packages {
		p.NameNative = p.Name
		if _, ok := dartKeywords[p.NameNative]; ok {
			p.NameNative += "_0"
		}
		for _, t := range p.Structs {
			t.NameNative = name.CamelCase(t.Name, true)
			if _, ok := dartKeywords[t.NameNative]; ok {
				t.NameNative += "_0"
			}
			for _, f := range t.Fields {
				f.NameNative = name.CamelCase(f.Name, false)
				if _, ok := dartKeywords[f.NameNative]; ok {
					f.NameNative += "_0"
				}
			}
		}
	}

	for _, p := range packages {
		for _, t := range p.Structs {
			for _, f := range t.Fields {
				if f.TypeRef != nil {
					f.TypeNative = f.TypeRef.NameNative
					if f.TypeRef.Pkg != p {
						f.TypeNative = f.TypeRef.Pkg.NameNative + "." + f.TypeNative
					}
					continue
				}
				if f.TypeList {
					if nativeType, ok := nativeListTypes[f.Type]; ok {
						f.TypeNative = nativeType
					} else {
						f.TypeNative = nativeTypes[f.Type]
					}
				} else {
					if nativeType, ok := nativeTypes[f.Type]; ok {
						f.TypeNative = nativeType
					} else {
						f.TypeNative = f.Type
					}
				}
			}
		}
		path := filepath.Join(basedir, p.Name)
		if err := os.MkdirAll(path, 0777); err != nil {
			return err
		}
		f, err := os.Create(filepath.Join(path, "Colfer.dart"))
		if err != nil {
			return err
		}
		defer f.Close()
		if err = t.Execute(f, p); err != nil {
			return err
		}
		if err = f.Sync(); err != nil {
			return err
		}
	}

	res, err := exec.Command("dart", "format", basedir, "--fix", "-l", "100").Output()
	fmt.Printf("%s", res)
	return err
}

const dartCode = `// Code generated by colf(1); DO NOT EDIT.
// The compiler used schema file {{.SchemaFileList}} for package {{.Name}}.
{{if .HasText }}
import 'dart:convert';
{{- end}}
import 'dart:typed_data';
{{- range .Refs}}
import '../{{.Name}}/Colfer.dart' as {{.NameNative}};
{{- end}}

{{.DocText "/// "}}

/// The upper limit for serial byte sizes.
const colferSizeMax = {{.SizeMax}};
{{- if .HasList}}
/// The upper limit for the number of elements in a list.
const colferListMax = {{.ListMax}};
{{- end}}

{{range .Structs}}
{{.DocText "/// "}}
class {{.NameNative}} {
  {{.NameNative}}({
{{- range .Fields}}
{{- if and .TypeList (or (eq .Type "text") (eq .Type "binary") (eq .Type "bool") (eq .Type "timestamp") .TypeRef)}}List<{{.TypeNative }}>? {{.NameNative}}
{{- else if or .TypeList (and (not .TypeList) (eq .Type "binary"))}}{{.TypeNative}}? {{.NameNative}}
{{- else if eq .Type "bool"}}this.{{.NameNative}} = false
{{- else if eq .Type "text"}}this.{{.NameNative}} = ''
{{- else if eq .TypeNative "int"}}this.{{.NameNative}} = 0
{{- else if eq .TypeNative "double"}}this.{{.NameNative}} = 0.0
{{- else if or .TypeRef (eq .Type "timestamp")}}this.{{.NameNative}}
{{- end}},
{{- end}}
})
{{- if or .HasList .HasBinary}}:
{{- $first := true}}
{{- range .Fields}}
{{- if .TypeList}}
{{- if $first}}{{$first = false}}
{{- else}},
{{- end}}
{{.NameNative}} = {{.NameNative}} ??
{{- if or .TypeRef (eq .Type "text") (eq .Type "binary")}}[]
{{- else}}{{.TypeNative}}(0)
{{- end}}
{{- else if eq .Type "binary"}}
{{- if $first}}{{$first = false}}
{{- else}},
{{- end}}
{{.NameNative}} = {{.NameNative}} ?? {{.TypeNative}}(0)
{{- end}}
{{- end}}
{{- end}};

{{- range .Fields}}
{{.DocText "  /// "}}
{{if and .TypeList (eq .Type "text" "binary")}}  List<{{.TypeNative}}>
{{- else if and .TypeList .TypeRef}}  List<{{.TypeNative}}?>
{{- else}}  {{.TypeNative}}
{{- if .TypeRef }}?
{{- end}}
{{- end}} {{.NameNative}};{{end}}

  /// Returns an over estimatation of marshal length.
  ///
  /// Throws [RangeError] if the size of a list exceeds [colferListMax].
  /// Returns an over estimated length for the required buffer. String
  /// characters are counted for 4 bytes, everything has its exact size.
  int marshalLen() {
    int _l = 1;
{{range .Fields}} { {{template "marshal-len" .}} } {{end}}
    if (_l > colferSizeMax) {
      return colferSizeMax;
    }
    return _l;
  }

{{template "marshal" .}}
{{template "unmarshal" .}}

  @override
  bool operator ==(_other) {
    if (_other is! {{.NameNative}}
{{- range .Fields}} ||
{{- if or (.TypeList) (eq .Type "binary")}} {{.NameNative}}.length != _other.{{.NameNative}}.length
{{- else}} {{.NameNative}} != _other.{{.NameNative}}
{{- end}}
{{- end}})
      return false;
{{- range .Fields}}
{{- if and (eq .Type "binary") (.TypeList)}}
    for (int _i = 0; _i < {{.NameNative}}.length; _i++) {
      var _l1 = {{.NameNative}}[_i];
      var _l2 = _other.{{.NameNative}}[_i];
      if (_l1.length != _l2.length)
        return false;
      for (int _i = 0; _i < _l1.length; _i++)
        if (_l1[_i] != _l2[_i]) return false;
    }
{{- else if or (eq .Type "binary") (.TypeList)}}
    for (int _i = 0; _i < {{.NameNative}}.length; _i++)
      if ({{.NameNative}}[_i] != _other.{{.NameNative}}[_i]) return false;
{{- end}}
{{- end}}
    return true;
  }

  @override
  int get hashCode {
    int _h = 0;
{{- range .Fields}}
{{- if .TypeList}}
    _h = 31 * _h + {{.NameNative}}.length;
    for (var _e in {{.NameNative}}) _h = 31 * _h + _e.hashCode;
{{- else}}
    _h = 31 * _h + {{.NameNative}}.hashCode;
{{- end}}
{{- end}}
    return _h;
  }

  @override
  String toString() => 'class {{.NameNative}} {'
{{- $first := true}}
{{- range .Fields}}
  '{{if $first}}{{$first = false}}{{else}}, {{end}}{{.NameNative}}:
{{- if eq .Type "text"}}
{{- if .TypeList}} [${ {{.NameNative}}.isNotEmpty ? "\"{{.NameNative}}.join('\", \"')}" : ""}]
{{- else}} "${{.NameNative}}"
{{- end}}
{{- else}}
{{- if .TypeList}} List<{{.TypeNative}}>{{else}} {{end}}${ {{.NameNative}}.toString()}
{{- end}}'
{{- end}};
}
{{- end}}
`

const dartMarshalLen = `{{if eq .Type "bool"}}
  if ({{.NameNative}}) {
    _l++;
  }
{{else if eq .Type "uint8"}}
  if ({{.NameNative}} != 0) {
    _l += 2;
  }
{{else if eq .Type "uint16"}}
  if ({{.NameNative}} >= 1<<8) {
    _l += 3;
  } else if ({{.NameNative}} != 0) {
    _l += 2;
  }
{{else if eq .Type "uint32"}}
  int _x = {{.NameNative}};
  if (_x >= 1<<21) {
    _l += 5;
  } else if (_x != 0) {
    for (_l += 2; _x >= 0x80; _l++) {
      _x >>= 7;
    }
  }
{{else if eq .Type "uint64"}}
  int _x = {{.NameNative}};
  if (_x < 0 || 0x2000000000000 <= _x) {
    _l += 9;
  } else if (_x != 0) {
    for (_l += 2; _x >= 0x80; _l++) {
      _x >>= 7;
    }
  }
{{else if eq .Type "int32"}}
  int _x = {{.NameNative}};
  if (_x != 0) {
    if (_x < 0) {
      _x = -_x;
    }
    for (_l += 2; _x >= 0x80; _l++) {
      _x >>= 7;
    }
  }
{{else if eq .Type "int64"}}
  int _x = {{.NameNative}};
  if (_x != 0) {
    if (-_x == _x) {
      _l += 10;
    } else {
      _l += 2;
      if (_x < 0) {
        _x = -_x;
      }
      for (; _x >= 0x80; _l++) {
        _x >>= 7;
      }
    }
  }
{{else if eq .Type "float32"}}
{{- if .TypeList}}
  int _x = {{.NameNative}}.length;
  if (_x != 0) {
    if (_x > colferListMax) {
      throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
    }
    for (_l += 2+_x*4; _x >= 0x80; _l++) {
      _x >>= 7;
    }
  }
{{- else}}
  if ({{.NameNative}} != 0) {
    _l += 5;
  }
{{- end}}
{{else if eq .Type "float64"}}
{{- if .TypeList}}
  int _x = {{.NameNative}}.length;
  if (_x != 0) {
    if (_x > colferListMax) {
      throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
    }
    for (_l += 2+_x*8; _x >= 0x80; _l++) {
      _x >>= 7;
    }
  }
{{- else}}
  if ({{.NameNative}} != 0) {
    _l += 9;
  }
{{- end}}
{{else if eq .Type "timestamp"}}
  DateTime? _v = {{.NameNative}};
  if (_v != null) {
    int _us = _v.microsecondsSinceEpoch;
    int _s = _us ~/ 1E6;
    if (_s >= 1 << 33 || _us < 0) {
      _l += 13;
    } else {
      _l += 9;
    }
  }
{{else if eq .Type "text" "binary"}}
  int _x = {{.NameNative}}.length;
  if (_x != 0) {
{{- if .TypeList}}
    if (_x > colferListMax) {
      throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
    }
    for (_l += 2; _x >= 0x80; _l++) {
      _x >>= 7;
    }
    for (final _a in {{.NameNative}}) {
      _x = _a.length;
{{- if eq .Type "text"}}
      _x *= 4;
{{- end}}
      for (_l += _x+1; _x >= 0x80; _l++) {
        _x >>= 7;
      }
    }
{{- else}}
{{- if eq .Type "text"}}
    _x *= 4;
{{- end}}
    for (_l += _x+2; _x >= 0x80; _l++) {
      _x >>= 7;
    }
{{- end}}
  }
{{else if .TypeList}}
  int _x = {{.NameNative}}.length;
  if (_x != 0) {
    if (_x > colferListMax) {
      throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
    }
    for (_l += 2; _x >= 0x80; _l++) {
      _x >>= 7;
    }
    for (final _v in {{.NameNative}}) {
      if (_v == null) {
        _l++;
        continue;
      }
      _l += _v.marshalLen();
    }
  }
{{else}}
  if ({{.NameNative}} != null) {
    _l += {{.NameNative}}!.marshalLen() + 1;
  }
{{end}}`

const dartMarshal = `
  /// Encodes as Colfer into [_buf].
  ///
  /// Throws [RangeError] if uint8, uint16, uint32 or int32 value overflows or
  /// underflows, or when the size of a list exceeds [colferListMax], or if a
  /// text, binary, or [_buf] exceeds [colferSizeMax]. Returns the number of
  /// bytes written.
  int marshalTo(Uint8List _buf) {
{{- if or .HasFloat .HasUint32 .HasTimestamp}}
    var _view = _buf.buffer.asByteData(_buf.offsetInBytes);
{{- end}}
    int _i = 0;
{{range .Fields}} { {{if eq .Type "bool"}}
    if ({{.NameNative}}) {
      _buf[_i] = {{.Index}};
      _i++;
    }
{{else if eq .Type "uint8"}}
    if ({{.NameNative}} != 0) {
      if ({{.NameNative}} > 255 || {{.NameNative}} < 0) {
        throw RangeError.range({{.NameNative}}, 0, 255, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _buf[_i+1] = {{.NameNative}};
      _i += 2;
    }
{{else if eq .Type "uint16"}}
    if ({{.NameNative}} != 0) {
      if ({{.NameNative}} > 65535 || {{.NameNative}} < 0) {
        throw RangeError.range({{.NameNative}}, 0, 65535, '{{.String}}', 'colfer');
      }
      if ({{.NameNative}} < 256) {
        _buf[_i] = {{.Index}} | 128;
        _buf[_i+1] = {{.NameNative}};
        _i += 2;
      } else {
        _buf[_i] = {{.Index}};
        _buf[_i+1] = {{.NameNative}} >> 8;
        _buf[_i+2] = {{.NameNative}};
        _i += 3;
      }
    }
{{else if eq .Type "uint32"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (_x > 4294967295 || _x < 0) {
        throw RangeError.range(_x, 0, 4294967295, '{{.String}}', 'colfer');
      }
      if (_x < 0x200000) {
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      } else {
        _buf[_i] = {{.Index}} | 128;
        _view.setInt32(_i+1, _x);
        _i += 5;
      }
    }
{{else if eq .Type "uint64"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (0 < _x && _x < 0x2000000000000) {
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      } else {
        _buf[_i] = {{.Index}} | 128;
        _view.setInt64(_i+1, _x);
        _i += 9;
      }
    }
{{else if eq .Type "int32"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (_x < 0) {
        if (_x < -2147483648) {
          throw RangeError.range(_x, -2147483648, null, '{{.String}}', 'colfer');
        }
        _buf[_i] = {{.Index}} | 128;
        _i++;
        _x = -_x;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      } else {
        if (_x > 2147483647) {
          throw RangeError.range(_x, null, 2147483647, '{{.String}}', 'colfer');
        }
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      }
    }
{{else if eq .Type "int64"}}
    int _x = {{.NameNative}};
    if (_x != 0) {
      if (_x < 0) {
        _buf[_i] = {{.Index}} | 128;
        _i++;
        _x = -_x;
        if ({{.NameNative}} == _x) {
          _buf.fillRange(_i, 10, 128);
          _i += 9;
        } else {
          while (_x > 127) {
            _buf[_i] = (_x & 127) | 128;
            _i++;
            _x >>= 7;
          }
          _buf[_i] = _x;
          _i++;
        }
      } else {
        _buf[_i] = {{.Index}};
        _i++;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _i++;
      }
    }
{{else if eq .Type "float32"}}
{{- if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (final _vi in {{.NameNative}}) {
        if (_vi.isNaN) {
          _buf[_i] = 0x7f;
          _buf[_i+1] = 0xc0;
        } else {
          _view.setFloat32(_i, _vi);
        }
        _i += 4;
      }
    }
{{- else}}
    if ({{.NameNative}} != 0) {
      _buf[_i] = {{.Index}};
      if ({{.NameNative}}.isNaN) {
        _buf[_i+1] = 0x7f;
        _buf[_i+2] = 0xc0;
      } else {
        _view.setFloat32(_i+1, {{.NameNative}});
      }
      _i += 5;
    }
{{- end}}
{{else if eq .Type "float64"}}
{{- if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (final _vi in {{.NameNative}}) {
        if (_vi.isNaN) {
          _buf[_i] = 0x7f;
          _buf[_i+1] = 0xf8;
          _buf[_i+7] = 1;
        } else {
          _view.setFloat64(_i, _vi);
        }
        _i += 8;
      }
    }
{{- else}}
    if ({{.NameNative}} != 0) {
      _buf[_i] = {{.Index}};
      if ({{.NameNative}}.isNaN) {
        _buf[_i+1] = 0x7f;
        _buf[_i+2] = 0xf8;
        _buf[_i+8] = 1;
      } else {
        _view.setFloat64(_i+1, {{.NameNative}});
      }
      _i += 9;
    }
{{- end}}
{{else if eq .Type "timestamp"}}
    if ({{.NameNative}} != null) {
      int _us = {{.NameNative}}!.microsecondsSinceEpoch;
      int _res = _us % 1000000;
      _us -= _res;
      int _s = _us ~/ 1E6;
      int _ns = _res * 1000;

      if (_s >= 1 << 33 || _us < 0) {
        _buf[_i] = {{.Index}} | 128;
        _view.setInt64(_i+1, _s);
        _i += 9;
      } else {
        _buf[_i] = {{.Index}};
        _view.setInt32(_i+1, _s);
        _i += 5;
      }
      _view.setInt32(_i, _ns);
      _i += 4;
    }
{{else if eq .Type "text" "binary"}}
{{- if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (final _vi in {{.NameNative}}) {
{{- if eq .Type "text"}}
        var _v = utf8.encode(_vi);
{{- else}}
        var _v = _vi;
{{- end}}
        _x = _v.length;
        while (_x > 127) {
          _buf[_i] = (_x & 127) | 128;
          _i++;
          _x >>= 7;
        }
        _buf[_i] = _x;
        _buf.setAll(_i + 1, _v);
        _i += 1 + _v.length;
      }
    }
{{- else}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      _buf[_i] = {{.Index}};
      _i++;
{{- if eq .Type "text"}}
      var _v = utf8.encode({{.NameNative}});
{{- else}}
      var _v = {{.NameNative}};
{{- end}}
      _x = _v.length;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _buf.setAll(_i + 1, _v);
      _i += 1 + _v.length;
    }
{{- end}}
{{else if .TypeList}}
    int _x = {{.NameNative}}.length;
    if (_x > 0) {
      if (_x > colferListMax) {
        throw RangeError.range(_x, null, colferListMax, '{{.String}}', 'colfer');
      }
      _buf[_i] = {{.Index}};
      _i++;
      while (_x > 127) {
        _buf[_i] = (_x & 127) | 128;
        _i++;
        _x >>= 7;
      }
      _buf[_i] = _x;
      _i++;
      for (var _vi in {{.NameNative}}) {
        _vi ??= {{.TypeNative}}();
        _i += _vi.marshalTo(Uint8List.view(_buf.buffer, _i));
      }
    }
{{else}}
    if ({{.NameNative}} != null) {
      _buf[_i] = {{.Index}};
      _i++;
      _i += {{.NameNative}}!.marshalTo(Uint8List.view(_buf.buffer, _i));
    }
{{end}} }
{{end}}

    _buf[_i] = 127;
    _i++;
    if (_i > colferSizeMax) {
      throw RangeError.range(_i, null, colferSizeMax, '{{.String}}', 'colfer');
    }
    return _i;
  }
`

const dartUnmarshal = `
  /// Decodes [_data] as Colfer.
  ///
  /// Throws [RangeError] if there is an unexpexted end of data, if a list
  /// exceeds [colferListMax], or if a text, binary or [_data] exceeds
  /// [colferSizeMax]. Throws [StateError] if ending header mismatches.
  /// Returns the number of bytes read.
  int unmarshal(Uint8List _data) {
    int _header = 0;
    int _i = 0;
{{- if or .HasTimestamp .HasFloat .HasUint32}}
    var _view = ByteData.view(_data.buffer);
{{- end}}
    _header = _data[_i];
    _i++;
{{range .Fields}}{{if eq .Type "bool"}}
    if (_header == {{.Index}}) {
      {{.NameNative}} = true;
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "uint8"}}
    if (_header == {{.Index}}) {
      {{.NameNative}} = _data[_i];
      _header = _data[_i+1];
      _i += 2;
    }
{{else if eq .Type "uint16"}}
    if (_header == {{.Index}}) {
      {{.NameNative}} = (_data[_i] << 8) | _data[_i+1];
      _header = _data[_i+2];
      _i += 3;
    } else if (_header == ({{.Index}} | 128)) {
      {{.NameNative}} = _data[_i];
      _header = _data[_i+1];
      _i += 2;
    }
{{else if eq .Type "uint32"}}
    if (_header == {{.Index}}) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      {{.NameNative}} = _c;
      _header = _data[_i];
      _i++;
    } else if (_header == ({{.Index}} | 128)) {
      {{.NameNative}} = _view.getUint32(_i);
      _header = _data[_i+4];
      _i += 5;
    }
{{else if eq .Type "uint64"}}
    if (_header == {{.Index}}) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      {{.NameNative}} = _c;
      _header = _data[_i];
      _i++;
    } else if (_header == ({{.Index}} | 128)) {
      int _v = _view.getUint32(_i) * 0x100000000;
      _v += _view.getUint32(_i + 4);
      {{.NameNative}} = _v;
      _header = _data[_i+8];
      _i += 9;
    }
{{else if eq .Type "int32"}}
    if (_header == {{.Index}}) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      {{.NameNative}} = _c;
      _header = _data[_i];
      _i++;
    } else if (_header == ({{.Index}} | 128)) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      {{.NameNative}} = -1 * _c;
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "int64"}}
    if (_header == {{.Index}}) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      {{.NameNative}} = _c;
      _header = _data[_i];
      _i++;
    } else if (_header == ({{.Index}} | 128)) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      {{.NameNative}} = -1 * _c;
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "float32"}}
    if (_header == {{.Index}}) {
 {{- if .TypeList}}
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      if (_c < 0 || _c > colferListMax) {
        throw RangeError.range(_c, 0, colferListMax, '{{.String}}', 'colfer');
      }

      if ({{.NameNative}}.length != _c) {
        {{.NameNative}} = Float32List(_c);
      }
      for (int _ci = 0; _ci < _c; _ci++) {
        {{.NameNative}}[_ci] = _view.getFloat32(_i);
        _i += 4;
      }
 {{- else}}
      {{.NameNative}} = _view.getFloat32(_i);
      _i += 4;
 {{- end}}
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "float64"}}
    if (_header == {{.Index}}) {
 {{- if .TypeList}}
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      if (_c < 0 || _c > colferListMax) {
        throw RangeError.range(_c, 0, colferListMax, '{{.String}}', 'colfer');
      }

      if ({{.NameNative}}.length != _c) {
        {{.NameNative}} = Float64List(_c);
      }
      for (int _ci = 0; _ci < _c; _ci++) {
        {{.NameNative}}[_ci] = _view.getFloat64(_i);
        _i += 8;
      }
 {{- else}}
      {{.NameNative}} = _view.getFloat64(_i);
      _i += 8;
 {{- end}}
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "timestamp"}}
    if (_header == {{.Index}}) {
      int _s = _view.getUint32(_i);
      int _us = _view.getUint32(_i + 4) ~/ 1000;
      {{.NameNative}} = DateTime.fromMicrosecondsSinceEpoch(_s * 1000000 + _us);
      _i += 8;
      _header = _data[_i];
      _i++;
    } else if (_header == ({{.Index}} | 128)) {
      int _s = _view.getInt64(_i);
      int _us = _view.getUint32(_i + 8) ~/ 1000;
      {{.NameNative}} = DateTime.fromMicrosecondsSinceEpoch(_s * 1000000 + _us);
      _i += 12;
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "text"}}
    if (_header == {{.Index}}) {
 {{- if .TypeList}}
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      if (_c < 0 || _c > colferListMax) {
        throw RangeError.range(_c, 0, colferListMax, '{{.String}}', 'colfer');
      }

      if ({{.NameNative}}.length != _c) {
        {{.NameNative}} = List<String>.filled(_c, '');
      }
      for (int _ci = 0; _ci < _c; _ci++) {
        int _size = _data[_i];
        _i++;
        if (_size >= 0x80) {
          _size &= 0x7f;
          for (int _shift = 7; ; _shift += 7) {
            int _b = _data[_i];
            _i++;
            if (_b < 0x80 || _shift == 56) {
              _size |= _b << _shift;
              break;
            }
            _size |= (_b & 0x7f) << _shift;
          }
        }
        if (_size < 0 || _size > colferSizeMax) {
          throw RangeError.range(_size, 0, colferSizeMax, '{{.String}}', 'colfer');
        }

        int _s = _i;
        _i += _size;
        {{.NameNative}}[_ci] = utf8.decode(_data.sublist(_s, _i));
      }
 {{- else}}
      int _size = _data[_i];
      _i++;
      if (_size >= 0x80) {
        _size &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _size |= _b << _shift;
            break;
          }
          _size |= (_b & 0x7f) << _shift;
        }
      }
      if (_size < 0 || _size > colferSizeMax) {
        throw RangeError.range(_size, 0, colferSizeMax, '{{.String}}', 'colfer');
      }

      int _s = _i;
      _i += _size;
      {{.NameNative}} = utf8.decode(_data.sublist(_s, _i));
 {{- end}}
      _header = _data[_i];
      _i++;
    }
{{else if eq .Type "binary"}}
    if (_header == {{.Index}}) {
 {{- if .TypeList}}
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      if (_c < 0 || _c > colferListMax) {
        throw RangeError.range(_c, 0, colferListMax, '{{.String}}', 'colfer');
      }

      if ({{.NameNative}}.length != _c) {
        {{.NameNative}} = List<Uint8List>.filled(_c, Uint8List(0));
      }
      for (int _ci = 0; _ci < _c; _ci++) {
        int _size = _data[_i];
        _i++;
        if (_size >= 0x80) {
          _size &= 0x7f;
          for (int _shift = 7; ; _shift += 7) {
            int _b = _data[_i];
            _i++;
            if (_b < 0x80 || _shift == 56) {
              _size |= _b << _shift;
              break;
            }
            _size |= (_b & 0x7f) << _shift;
          }
        }
        if (_size < 0 || _size > colferSizeMax) {
          throw RangeError.range(_size, 0, colferSizeMax, '{{.String}}', 'colfer');
        }

        int _s = _i;
        _i += _size;
        {{.NameNative}}[_ci] = _data.sublist(_s, _i);
      }
 {{- else}}
      int _size = _data[_i];
      _i++;
      if (_size >= 0x80) {
        _size &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _size |= _b << _shift;
            break;
          }
          _size |= (_b & 0x7f) << _shift;
        }
      }
      if (_size < 0 || _size > colferSizeMax) {
        throw RangeError.range(_size, 0, colferSizeMax, '{{.String}}', 'colfer');
      }

      int _start = _i;
      _i += _size;
      {{.NameNative}} = _data.sublist(_start, _i);
 {{- end}}
      _header = _data[_i];
      _i++;
    }
{{else if .TypeList}}
    if (_header == {{.Index}}) {
      int _c = _data[_i];
      _i++;
      if (_c >= 0x80) {
        _c &= 0x7f;
        for (int _shift = 7; ; _shift += 7) {
          int _b = _data[_i];
          _i++;
          if (_b < 0x80 || _shift == 56) {
            _c |= _b << _shift;
            break;
          }
          _c |= (_b & 0x7f) << _shift;
        }
      }
      if (_c < 0 || _c > colferListMax) {
        throw RangeError.range(_c, 0, colferListMax, '{{.String}}', 'colfer');
      }

      if ({{.NameNative}}.length != _c) {
        {{.NameNative}} = List<{{.TypeNative}}>.filled(_c, {{.TypeNative}}());
      }
      for (var _ci in {{.NameNative}}) {
        _ci ??= {{.TypeNative}}();
        _i += _ci.unmarshal(_data.sublist(_i));
      }
      _header = _data[_i];
      _i++;
    }
{{else}}
    if (_header == {{.Index}}) {
      var _s = {{.TypeNative}}();
      _i += _s.unmarshal(_data.sublist(_i));
      {{.NameNative}} = _s;
      _header = _data[_i];
      _i++;
    }
{{end}}{{end}}
    if (_header != 127) {
      throw StateError('colfer: unknown header $_header at byte ${_i - 1}');
    }
    if (_i > colferSizeMax) {
      throw RangeError.range(_i, null, colferSizeMax, '{{.String}}', 'colfer');
    }
    return _i;
  }
`
